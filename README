INTRODUCTION
What is the django-sanity app used for?
Sanity is a Django application providing tests to ensure stability for a resource in a given environment based on your Django settings.

SUPPORTED RESOURCES
As of 05/02/2011, the django-sanity app supports testing the following module(s):
    * Celery

USAGE:
You can execute django-admin.py sane --help or --h to get an output of the usage.  Here is a copy and paste of that output. 
Usage: /Users/rcombs/devel/cms_aa/bin/django-admin.py sane <resource1 resource2 ...> [--celery_timeout] or                     
       /Users/rcombs/devel/cms_aa/bin/django-admin.py sane [--celery_timeout] to test all configured Sane modules or                    
       /Users/rcombs/devel/cms_aa/bin/django-admin.py sane list to get a list of Sane modules to be tested                    
       Available Resources to test: celery

Options:
  -v VERBOSITY, --verbosity=VERBOSITY
                        Verbosity level; 0=minimal output, 1=normal output,
                        2=all output
  --settings=SETTINGS   The Python path to a settings module, e.g.
                        "myproject.settings.main". If this isn't provided, the
                        DJANGO_SETTINGS_MODULE environment variable will be
                        used.
  --pythonpath=PYTHONPATH
                        A directory to add to the Python path, e.g.
                        "/home/djangoprojects/myproject".
  --traceback           Print traceback on exception
  --ct=CELERY_TIMEOUT, --celery_timeout=CELERY_TIMEOUT
                        Specify a time out in terms of seconds for tests.  The
                        default is the value defined in SANITY_CELERY_TIMEOUT.  If that variable is not found, then it will fall back to 10 seconds.
  --version             show program's version number and exit
  -h, --help            show this help message and exit

example: django-admin.py sane celery --celery_timeout=10; This tells django-sanity to test celery and to create a 10 sec timeout limit when attempting to talk to celery.

SANITY_CELERY_TIMEOUT
Also, django-sanity will pick up any sanity specific variables in your Django settings file like SANITY_CELERY_TIMEOUT.  If django-sanity finds this variable in settings, it will take precedence over the default value of 10.  The command line --celery_timeout arg trumps them all.

CODE CHECKS FOR CELERY
django-sanity sane verifies that the code in your current directory matches the code that is running by your celery workers.  You'll
need to make sure that you can run sha1sum from the command line in a shell.

ADDITIONAL SANITY REQUIREMENTS TO IMPLEMENT:
* we want a command to verify the sanity of an environment
  - primarily for ad hoc use in dev environments right now
  - figure out whether and how to automate it / integrate later
  - possibly integrate into the deploy process: don't add a server back into the SLB rotation unless it is sane
  - possibly incorporated into wsgi boot process
  - tests written in python
    - write test harness, use python TestCase

* Services
  - Apache
    - ping server-info module on localhost (obfuscated url?)
    - check that vhosts match site_list
  - WSGI daemon
    - add server-info to medley (also nice for slb healthchecks)
    - talk to them over their unix sockets (maybe)
  - lighttpd
    - static request, mod_status, or at least HEAD => 200
  - mogrify
    - scale some_image_that_will_always_be_here.png
      -  test for cached file
      -  delete cached file
  - media mounts
    - test MEDIA_ROOT, at the minimum
    - more discovery required
    - read & write
    - make sure it's actually mounted
    - permissions, and: who runs this script?
  - templates
    - verify existence of links pointing into medley-templates
  - postgres
    - make some queries (version, read/write)
    - verify schema? ownership? constraints? compute pi to nth digit?
    - replication??
  - memcache
    - set / get
    - stats
    - flush cache in reloadprod command (and rename reloadprod command!)
  - celery (workers, beat, and rabbitmq)
    - verify rabbit queues
    - celery task -> queue -> worker -> something to indicate success within n seconds
    - celery periodic task -> celerybeat -> queue -> worker -> something to indicate success within n seconds
    - make sure celery workers are running the version of code we expect
    - add queue depth monitoring graphs
    - integrate celerymon if possible
    - is it deployed where it's supposed to be deployed?
  - solr
    - fix solr so it reports its schema
    - index & search (& remove)
    - replication??
      - also need to figure out how to NOT automatically install new schema
      - but automate in VMs
  - virtualenv
    - python version
    - packages match pip
  - medley
    - is it deployed where it's supposed to be deployed?
    - have an endpoint to expose HEAD git hash
  - signin
    - test vhost and have sanity endpoint / server-info w/ code hash
    - is it deployed where it's supposed to be deployed?
* services we still need to elaborate
  - hudson slaves
  - host config (/etc/hosts, /etc/resolv.conf, /etc/sudoers, /etc/*)
  - varnish (possibly, for adt)
  - slbs
  - cron jobs

* most importantly: what do we call it?! *sane*

* fe != prod (but should (within reason))
  - if we have the same service stack w/ well-defined interfaces, then implementation details are less important
  - recognize that, in many cases, we don't need fe == prod, we need fe == fast

* service dependency graph
  - we need one of these
  - auto-generated, where possible
  - integration with config mgmt tools (puppet)
  - transparent & visible
  - answers two questions:
    - which services do I depend on? (the "what")
    - which hosts run which services? (hosts, ports, paths, urls, etc: the "where")
